{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Phel",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#parens"
		},
		{
			"include": "#brakets"
		},
		{
			"include": "#braces"
		},
		{
			"include": "#readermac"
		},
		{
			"include": "#keysym"
		},
		{
			"include": "#literal"
		},
		{
			"include": "#number"
		},
		{
			"include": "#corelib"
		},
		{
			"include": "#symbol"
		}
	],
	"repository": {
		"corelib": {
			"patterns": [
				{
					"name": "keyword.control.phel",
					"match": "(?<=\\(|\\{|\\[|\\s)(declare|defstruct|defmacro-|defmacro|defn-|defn|def-|def|recur|fn|try|catch|finally|loop|ns|quote|dofor|do|if-not|if|when-not|when|apply|let|foreach|for|case|cond)(?=(\\s|,|\\)\\}\\]))(?=\\s|\\)|\\]|\\})"
				},
				{
					"name": "keyword.control.phel",
					"match": "(?<=\\(|\\{|\\[|\\s)(php\\/[^\\s\\#\\(\\)\\{\\}\\[\\]\\'\\\"\\,\\`]+)(?=\\s|\\)|\\]|\\})"
				}
			]
		},
		"number": {
			"patterns": [
				{
					"match": "0[xX][0-9a-fA-F]+(?:_[0-9a-fA-F]+)*",
					"name": "constant.numeric.hex.phel"
				},
				{
					"match": "0[bB][01]+(?:_[01]+)*",
					"name": "constant.numeric.binary.phel"
				},
				{
					"match": "0(?:_?[0-7]+)+",
					"name": "constant.numeric.octal.phel"
				},
				{
					"match": "(?x)\n(?:\n  (?:[0-9]+(?:_[0-9]+)*)?(\\.)[0-9]+(?:_[0-9]+)*(?:[eE][+-]?[0-9]+(?:_[0-9]+)*)?| # .3\n  [0-9]+(?:_[0-9]+)*(\\.)(?:[0-9]+(?:_[0-9]+)*)?(?:[eE][+-]?[0-9]+(?:_[0-9]+)*)?| # 3.\n  [0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*                                   # 2e-3\n)",
					"name": "constant.numeric.decimal.phel",
					"captures": {
						"1": {
							"name": "punctuation.separator.decimal.period.phel"
						},
						"2": {
							"name": "punctuation.separator.decimal.period.phel"
						}
					}
				},
				{
					"match": "(-?\\d+)",
					"name": "constant.numeric.decimal.phel"
				}
			]
		},
		"literal": {
			"patterns": [
				{
					"match": "(?<=^|\\s|\\(|\\[|\\{)(nil)(?=(\\s|\\)|\\]|\\}))",
					"name": "constant.language.nil.phel"
				},
				{
					"match": "(?<=^|\\s|\\(|\\[|\\{)(true|false)(?=(\\s|\\)|\\]|\\}))",
					"name": "constant.language.boolean.phel"
				}
			]
		},
		"readermac": {
			"name": "punctation.other.phel",
			"match": "[\\`\\'\\,]"
		},
		"keysym": {
			"name": "variable.other.constant.phel",
			"match": ":[^\\s\\#\\(\\)\\{\\}\\[\\]\\'\\\"\\,\\`]+"
		},
		"symbol": {
			"name": "meta.symbol.phel",
			"match": "(?<![\\-])[^\\s\\#\\(\\)\\{\\}\\[\\]\\'\\\"\\,\\`]+"
		},
		"braces": {
			"begin": "(\\@\\{)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.braces.begin.phel"
				}
			},
			"end": "(\\})",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.braces.end.phel"
				}
			},
			"name": "meta.expression.phel",
			"patterns": [
				{
					"include": "#all"
				}
			]
		},
		"brakets": {
			"begin": "(@?\\[)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.bracket.begin.phel"
				}
			},
			"end": "(\\])",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.bracket.end.phel"
				}
			},
			"patterns": [
				{
					"include": "#all"
				}
			]
		},
		"parens": {
			"begin": "(@?\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.parens.begin.phel"
				}
			},
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.parens.end.phel"
				}
			},
			"patterns": [
				{
					"include": "#all"
				}
			]
		},
		"comment": {
			"begin": "#",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.phel"
				}
			},
			"end": "$",
			"name": "comment.line.hash.phel"
		},
		"strings": {
			"name": "string.quoted.double.phel",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.phel",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.phel"
}